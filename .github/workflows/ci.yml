name: CI/CD Pipeline for Eureka Service

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code for Eureka Service
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven (skip tests)
        run: mvn clean package -DskipTests

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Verify Docker Compose Installation
        run: docker-compose --version

      - name: Set up Docker Compose for Eureka Service
        working-directory: .
        run: docker-compose up -d --build

      - name: Wait for Eureka Service to be ready
        run: sleep 30

      - name: Capture logs for Eureka Service
        working-directory: .
        run: docker logs eureka-server

      - name: List running containers
        run: docker ps -a

      - name: Test Eureka Status
        run: python3 scripts/test_service.py

      - name: Integration Test with Curl
        run: python3 scripts/integration_test.py

      - name: Register Dummy Service
        run: python3 scripts/register_dummy_service.py

      - name: Force remove any containers still running
        run: |
          docker stop $(docker ps -q) || true  # Stop any running containers, ignore errors if none are running
          docker rm $(docker ps -a -q) || true  # Force removal of all containers

      - name: Force remove the specific network
        run: |
          docker network disconnect -f eureka-service_default $(docker network inspect eureka-service_default -f '{{range .Containers}}{{.Name}} {{end}}') || true
          docker network rm eureka-service_default || true

      - name: Final cleanup for Docker networks
        run: |
          docker network prune -f

      - name: List all containers and networks
        run: |
          docker ps -a
          docker network ls
